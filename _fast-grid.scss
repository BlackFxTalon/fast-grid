// default settings
$grid: (
  breakpoints: (
    xxs: 0px,
    xs: 360px,
    sm: 768px,
    md: 992px,
    lg: 1200px,
    xl: 1600px
  ),
  columns: 12,
  gap: 15px,
  container: 15px
);

// get width for breakpoint
@function grid-width($breakpoint, $default: null) {
  $default: $grid !default;
  @return map-get(map-get($default, breakpoints), $breakpoint);
}

@mixin grid-breakpoint($breakpoint) {
  @media (min-width: grid-width($breakpoint)) {
    @content
  }
}

// convert list to map
@function gridListToMap($list, $default) {
  $result: ();
  $i: 0;
  $breakpoints: map-get($default, breakpoints);
  @each $breakpoint, $value in $breakpoints {
    $i: $i + 1;
    $value: if(length($list) >= $i, nth($list, $i), null);
    @if $value != null {
      $result: map-merge($result, ($breakpoint: $value));
    }
  }
  @return $result;
}

// grid-container()
@mixin grid-container($from, $default: null) {
  $default: if($default != null, map-merge($grid, $default), $grid);
  $gap: map-get($default, container);
  margin-left: auto;
  margin-right: auto;
  padding-left: $gap;
  padding-right: $gap;

  $map: map_get($default, breakpoints);
  $found: null;
  @each $breakpoint, $minWidth in $map {
    @if $breakpoint == $from {
      $found: true;
    }
    @if $found == true {
      @if $minWidth > 0 {
        @media (min-width: $minWidth) {
          max-width: $minWidth;
        }
      } @else {
        max-width: $minWidth;
      }
    }
  }
}

// grid-row()
@mixin grid-row($default: null) {
  $default: if($default != null, map-merge($grid, $default), $grid);
  $gap: map-get($default, gap);
  display: flex;
  flex-flow: row wrap;

  @if type-of($gap) == number {
    margin-left: -$gap;
    margin-right: -$gap;
  } @else {
    @if (type-of($gap) == list) {
      $gap: gridListToMap($gap, $default);
    }
    @each $breakpoint, $value in $gap {
      $minWidth: grid-width($breakpoint, $default);
      @if $minWidth > 0 {
        @media (min-width: $minWidth) {
          margin-left: -$value;
          margin-right: -$value;
        }
      } @else {
        margin-left: -$value;
        margin-right: -$value;
      }
    }
  }
}

// grid-col()
@mixin grid-col($breakpoints, $default: null) {
  $default: if($default != null, map-merge($grid, $default), $grid);
  $columns: map-get($default, columns);
  $gap:     map-get($default, gap);

  @if type-of($breakpoints) == list {
    $len: length($breakpoints);
    @if $len >= 3 and nth($breakpoints, $len - 1) == 'of' {
      $columns: nth($breakpoints, $len);
      @if ($len > 3) {
        $breakpoints: set-nth($breakpoints, $len, null);
        $breakpoints: set-nth($breakpoints, $len - 1, null);
        $breakpoints: gridListToMap($breakpoints, $default);
      } @else {
        $breakpoints: nth($breakpoints, 1);
      }
    } @else {
      $breakpoints: gridListToMap($breakpoints, $default);
    }
  }

  @if type-of($gap) == number {
    padding-left: $gap;
    padding-right: $gap;
  } @else {
    @if (type-of($gap) == list) {
      $gap: gridListToMap($gap, $default);
    }
  }

  @mixin grid-col-internal($span, $columns, $gap) {
    @if $span != null {
      width: 100% * $span / $columns;
    }
    padding-left: $gap;
    padding-right: $gap;
  }

  $map: map_get($default, breakpoints);
  @each $breakpoint, $minWidth in $map {
    $span: map-get($breakpoints, $breakpoint);
    @if type-of($span) == list and nth($span, 2) == 'of' {
      $columnsLocal: nth($span, 3);
      $span: nth($span, 1);
    }
    $columnsLocal: $columns !default;

    $gapLocal: null;
    @if type-of($gap) == map {
      $gapLocal: map-get($gap, $breakpoint);
    }

    @if $minWidth > 0 {
      @media (min-width: $minWidth) {
        @include grid-col-internal($span, $columnsLocal, $gapLocal);
      }
    } @else {
      @include grid-col-internal($span, $columnsLocal, $gapLocal);
    }
  }
}